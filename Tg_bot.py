import telebot
import sqlite3
from telebot import types

API_TOKEN = '6468230239:AAGsYFJLgppd62hDduN1WmtDSy2ELx9v2hg'
bot = telebot.TeleBot(API_TOKEN)

conn = sqlite3.connect('db/AUTO.db', check_same_thread=False)
cursor = conn.cursor()


def db_table_val_user(FIO: str, number: str, age: int, gmail: str, adress: str, tg_id: int):
    cursor.execute('INSERT INTO USER (FIO, number, age, gmail, adress, tg_id) VALUES (?, ?, ?, ?, ?, ?)',
                   (FIO, number, age, gmail, adress, tg_id))
    conn.commit()


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, start_text())


def start_text():
    text = ("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏–Ω—á–∞—á–µ –µ—Å–ª–∏ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Å–µ–±–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —Å–º–æ–≥—É—Ç —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è!\n"
            "–ù—É –∞ –ø–æ–∫–∞ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–∏—Å—É–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é!\n")
    return text


def next():
    text = ("–ü—Ä–∏–≤–µ—Ç –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É: \n"
            "/technical_support - @SIR_help_cr24_bot\n"
            "/car_catalog - –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
            )
    return text


def registration_text():
    text = ("–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É:\n"
            "–§–ò–û\n"
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "–í–æ–∑—Ä–∞—Å—Ç\n"
            "–ü–æ—á—Ç–∞\n"
            "–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
            "8 925 212 32 07\n"
            "31\n"
            "ivanov@gmail.com\n"
            "–†–æ—Å—Å–∏—è, –ú—ã—Ç–∏—â–∏, 5-—ã–π –©–µ–ª–∫–æ–≤—Å–∫–∏–π –ø—Ä. –¥.7 –∫.2 –∫–≤ 218\n")
    return text


# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
@bot.message_handler(commands=['technical_support'])
def technical_support(message):
    bot.send_message(message.chat.id, "@SIR_help_cr24_bot")


@bot.message_handler(commands=['car_catalog'])
def car_catalog_handler(message):
    cursor.execute("SELECT FIO FROM USER WHERE tg_id = ?", (message.from_user.id,))
    user_name = cursor.fetchone()

    if user_name:
        user_name = user_name[0]
    else:
        user_name = "–ì–æ—Å—Ç—å"

    # –°–æ–∑–¥–∞—ë–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ê–º–µ—Ä–∏–∫–∞ üá∫üá∏", callback_data="america")
    btn2 = types.InlineKeyboardButton("–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", callback_data="germany")
    markup.add(btn1, btn2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ò–∑ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —Ç—ã —Ö–æ—á–µ—à—å —Å–µ–±–µ –º–∞—à–∏–Ω—É?\n"
             "–ò–∑ –ê–º–µ—Ä–∏–∫–∏ —Ç–∞–∫–∏–µ –∫–∞–∫ Ford, Dodge, Chevrolet\n"
             "–ò–∑ –ì–µ—Ä–º–∞–Ω–∏–∏ —Ç–∞–∫–∏–µ –∫–∞–∫ BMW, Mercedes, Porsche",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data in ["america", "germany", "back_to_menu", "ford", "dodge", "chevrolet", "bmw", "mercedes", "porsche"])
def callback_query_handler(call):
    if call.data == "america":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("Ford", callback_data="ford")
        btn2 = types.InlineKeyboardButton("Dodge", callback_data="dodge")
        btn3 = types.InlineKeyboardButton("Chevrolet", callback_data="chevrolet")
        back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1, btn2, btn3)
        markup.add(back)
        bot.send_message(call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:", reply_markup=markup)

    elif call.data == "germany":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("BMW", callback_data="bmw")
        btn2 = types.InlineKeyboardButton("Mercedes", callback_data="mercedes")
        btn3 = types.InlineKeyboardButton("Porsche", callback_data="porsche")
        back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1, btn2, btn3)
        markup.add(back)
        bot.send_message(call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:", reply_markup=markup)

    elif call.data == "back_to_menu":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–ê–º–µ—Ä–∏–∫–∞ üá∫üá∏", callback_data="america")
        btn2 = types.InlineKeyboardButton("–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", callback_data="germany")
        markup.add(btn1, btn2)
        bot.send_message(call.message.chat.id, text="–ò–∑ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É?", reply_markup=markup)

    elif call.data == "bmw":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§", callback_data="like")
        btn2 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1)
        markup.add(btn2)
        cursor.execute('SELECT link FROM BMW')
        photos = cursor.fetchall()
        cursor.execute('SELECT * FROM BMW')
        rows = cursor.fetchall()
        if len(photos) != len(rows):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")
            return
        for row, photo in zip(rows, photos):
            caption = (
                f"id: {row[0]}\n"
                f"–ú–∞—Ä–∫–∞: {row[1]}"
                f"–ú–æ–¥–µ–ª—å: {row[2]}"
                f"–ì–æ–¥: {row[3]}\n"
                f"–õ.—Å: {row[4]}\n"
                f"–õ–∏—Ç—Ä—ã: {row[5]}\n"
                f"–ö–æ—Ä–æ–±–∫–∞: {row[6]}"
                f"–ü—Ä–∏–≤–æ–¥: {row[7]}"
                f"–¶–≤–µ—Ç: {row[8]}"
                f"–°—Ç—Ä–∞–Ω–∞: {row[9]}"
                f"–¶–µ–Ω–∞: {row[10]}"
            )
            photo_url = photo[0]
            bot.send_photo(chat_id=call.message.chat.id, photo=photo_url, caption=caption, reply_markup=markup)

    elif call.data == "mercedes":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§", callback_data="like")
        btn2 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1)
        markup.add(btn2)
        cursor.execute('SELECT link FROM MERCEDES')
        photos = cursor.fetchall()
        cursor.execute('SELECT * FROM MERCEDES')
        rows = cursor.fetchall()
        if len(photos) != len(rows):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")
            return
        for row, photo in zip(rows, photos):
            caption = (
                f"id: {row[0]}\n"
                f"–ú–∞—Ä–∫–∞: {row[1]}"
                f"–ú–æ–¥–µ–ª—å: {row[2]}"
                f"–ì–æ–¥: {row[3]}\n"
                f"–õ.—Å: {row[4]}\n"
                f"–õ–∏—Ç—Ä—ã: {row[5]}\n"
                f"–ö–æ—Ä–æ–±–∫–∞: {row[6]}"
                f"–ü—Ä–∏–≤–æ–¥: {row[7]}"
                f"–¶–≤–µ—Ç: {row[8]}"
                f"–°—Ç—Ä–∞–Ω–∞: {row[9]}"
                f"–¶–µ–Ω–∞: {row[10]}"
            )
            photo_url = photo[0]
            bot.send_photo(chat_id=call.message.chat.id, photo=photo_url, caption=caption, reply_markup=markup)

    elif call.data == "porsche":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§", callback_data="like")
        btn2 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1)
        markup.add(btn2)
        cursor.execute('SELECT link FROM PORSCHE')
        photos = cursor.fetchall()
        cursor.execute('SELECT * FROM PORSCHE')
        rows = cursor.fetchall()
        if len(photos) != len(rows):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")
            return
        for row, photo in zip(rows, photos):
            caption = (
                f"id: {row[0]}\n"
                f"–ú–∞—Ä–∫–∞: {row[1]}"
                f"–ú–æ–¥–µ–ª—å: {row[2]}"
                f"–ì–æ–¥: {row[3]}\n"
                f"–õ.—Å: {row[4]}\n"
                f"–õ–∏—Ç—Ä—ã: {row[5]}\n"
                f"–ö–æ—Ä–æ–±–∫–∞: {row[6]}"
                f"–ü—Ä–∏–≤–æ–¥: {row[7]}"
                f"–¶–≤–µ—Ç: {row[8]}"
                f"–°—Ç—Ä–∞–Ω–∞: {row[9]}"
                f"–¶–µ–Ω–∞: {row[10]}"
            )
            photo_url = photo[0]
            bot.send_photo(chat_id=call.message.chat.id, photo=photo_url, caption=caption, reply_markup=markup)

    elif call.data == "ford":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§", callback_data="like")
        btn2 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1)
        markup.add(btn2)
        cursor.execute('SELECT link FROM FORD')
        photos = cursor.fetchall()
        cursor.execute('SELECT * FROM FORD')
        rows = cursor.fetchall()
        if len(photos) != len(rows):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")
            return
        for row, photo in zip(rows, photos):
            caption = (
                f"id: {row[0]}\n"
                f"–ú–∞—Ä–∫–∞: {row[1]}"
                f"–ú–æ–¥–µ–ª—å: {row[2]}"
                f"–ì–æ–¥: {row[3]}\n"
                f"–õ.—Å: {row[4]}\n"
                f"–õ–∏—Ç—Ä—ã: {row[5]}\n"
                f"–ö–æ—Ä–æ–±–∫–∞: {row[6]}"
                f"–ü—Ä–∏–≤–æ–¥: {row[7]}"
                f"–¶–≤–µ—Ç: {row[8]}"
                f"–°—Ç—Ä–∞–Ω–∞: {row[9]}"
                f"–¶–µ–Ω–∞: {row[10]}"
            )
            photo_url = photo[0]
            bot.send_photo(chat_id=call.message.chat.id, photo=photo_url, caption=caption, reply_markup=markup)

    elif call.data == "dodge":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§", callback_data="like")
        btn2 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1)
        markup.add(btn2)
        cursor.execute('SELECT link FROM DODGE')
        photos = cursor.fetchall()
        cursor.execute('SELECT * FROM DODGE')
        rows = cursor.fetchall()
        if len(photos) != len(rows):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")
            return
        for row, photo in zip(rows, photos):
            caption = (
                f"id: {row[0]}\n"
                f"–ú–∞—Ä–∫–∞: {row[1]}"
                f"–ú–æ–¥–µ–ª—å: {row[2]}"
                f"–ì–æ–¥: {row[3]}\n"
                f"–õ.—Å: {row[4]}\n"
                f"–õ–∏—Ç—Ä—ã: {row[5]}\n"
                f"–ö–æ—Ä–æ–±–∫–∞: {row[6]}"
                f"–ü—Ä–∏–≤–æ–¥: {row[7]}"
                f"–¶–≤–µ—Ç: {row[8]}"
                f"–°—Ç—Ä–∞–Ω–∞: {row[9]}"
                f"–¶–µ–Ω–∞: {row[10]}"
            )
            photo_url = photo[0]
            bot.send_photo(chat_id=call.message.chat.id, photo=photo_url, caption=caption, reply_markup=markup)

    elif call.data == "chevrolet":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§", callback_data="like")
        btn2 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(btn1)
        markup.add(btn2)
        cursor.execute('SELECT link FROM CHEVROLET')
        photos = cursor.fetchall()
        cursor.execute('SELECT * FROM CHEVROLET')
        rows = cursor.fetchall()
        if len(photos) != len(rows):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.")
            return
        for row, photo in zip(rows, photos):
            caption = (
                f"id: {row[0]}\n"
                f"–ú–∞—Ä–∫–∞: {row[1]}"
                f"–ú–æ–¥–µ–ª—å: {row[2]}"
                f"–ì–æ–¥: {row[3]}\n"
                f"–õ.—Å: {row[4]}\n"
                f"–õ–∏—Ç—Ä—ã: {row[5]}\n"
                f"–ö–æ—Ä–æ–±–∫–∞: {row[6]}"
                f"–ü—Ä–∏–≤–æ–¥: {row[7]}"
                f"–¶–≤–µ—Ç: {row[8]}"
                f"–°—Ç—Ä–∞–Ω–∞: {row[9]}"
                f"–¶–µ–Ω–∞: {row[10]}"
            )
            photo_url = photo[0]
            bot.send_photo(chat_id=call.message.chat.id, photo=photo_url, caption=caption, reply_markup=markup)


@bot.message_handler(commands=['registration'])
def registration_handler(message):
    bot.send_message(message.chat.id, registration_text())
    bot.register_next_step_handler(message, process_registration)


def process_registration(message):
    user_id = message.from_user.id
    try:
        lines = message.text.split('\n')
        if len(lines) < 5:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        FIO_text = lines[0]
        number_text = lines[1]
        age_text = int(lines[2])
        gmail_text = lines[3]
        adress_text = lines[4]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        db_table_val_user(FIO=FIO_text, number=number_text, age=age_text, gmail=gmail_text, adress=adress_text, tg_id=user_id)

        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n"
                                          "/technical_support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                                          "/car_catalog - –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {e}")


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω
#@bot.message_handler(content_types=['text'])
#pass


bot.polling(none_stop=True)
